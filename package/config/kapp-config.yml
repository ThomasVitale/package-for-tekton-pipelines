---
apiVersion: kapp.k14s.io/v1alpha1
kind: Config

minimumRequiredVersion: 0.50.0

#! Rebase rules explicitly define how kapp should merge resources during an update.
#! See more about the resource merge method: https://carvel.dev/kapp/docs/latest/merge-method.
rebaseRules:

#! The HorizontalPodAutoscaler updates the replicas on Deployments.
#! We want to keep that configuration between upgrades.
- path: [spec, replicas]
  type: copy
  sources: [existing, new]
  resourceMatchers:
  - apiVersionKindMatcher: {apiVersion: apps/v1, kind: Deployment}

#! This Secret is created empty and populated by Tekton Pipelines.
#! We want to keep that configuration between upgrades.
- paths:
  - [data, ca-cert.pem]
  - [data, server-cert.pem]
  - [data, server-key.pem]
  type: copy
  sources: [new, existing]
  resourceMatchers:
  - apiVersionKindMatcher: {apiVersion: v1, kind: Secret, name: webhook-certs}

#! By default, the changes applied by users to the ConfigMaps used by Tekton Pipelines
#! are persisted between upgrades.
- path: [data]
  type: copy
  sources: [existing, new]
  resourceMatchers:
  - andMatcher:
      matchers:
      - apiVersionKindMatcher: {apiVersion: v1, kind: ConfigMap}
      - hasNamespaceMatcher:
          names:
          - tekton-pipelines
          - tekton-pipelines-resolvers

#! Changes applied by users to the ConfigMaps for which this package provides overlays
#! are not persisted between upgrades.
- path: [data]
  type: copy
  sources: [new]
  resourceMatchers:
  - kindNamespaceNameMatcher: {kind: ConfigMap, namespace: tekton-pipelines, name: config-defaults}
  - kindNamespaceNameMatcher: {kind: ConfigMap, namespace: tekton-pipelines, name: config-leader-election}
  - kindNamespaceNameMatcher: {kind: ConfigMap, namespace: tekton-pipelines, name: config-logging}
  - kindNamespaceNameMatcher: {kind: ConfigMap, namespace: tekton-pipelines, name: config-observability}
  - kindNamespaceNameMatcher: {kind: ConfigMap, namespace: tekton-pipelines, name: config-registry-cert}
  - kindNamespaceNameMatcher: {kind: ConfigMap, namespace: tekton-pipelines, name: feature-flags}
  - kindNamespaceNameMatcher: {kind: ConfigMap, namespace: tekton-pipelines-resolvers, name: config-leader-election}
  - kindNamespaceNameMatcher: {kind: ConfigMap, namespace: tekton-pipelines-resolvers, name: config-logging}
  - kindNamespaceNameMatcher: {kind: ConfigMap, namespace: tekton-pipelines-resolvers, name: config-observability}

#! This webhook configuration is populated by Tekton Pipelines.
#! We want to persist those changes between upgrades.
- paths:
  - [spec, conversion, webhook, clientConfig, service, path]
  - [spec, conversion, webhook, clientConfig, service, port]
  - [spec, names, listKind]
  - [spec, preserveUnknownFields]
  type: copy
  sources: [new, existing]
  resourceMatchers:
  - apiVersionKindMatcher: {apiVersion: apiextensions.k8s.io/v1, kind: CustomResourceDefinition}

#! These webhook configurations are populated by Tekton Pipelines.
#! We want to persist those changes between upgrades.
- paths:
  - [webhooks, {allIndexes: true}, clientConfig, service, path]
  - [webhooks, {allIndexes: true}, clientConfig, service, port]
  - [webhooks, {allIndexes: true}, matchPolicy]
  - [webhooks, {allIndexes: true}, namespaceSelector]
  - [webhooks, {allIndexes: true}, objectSelector]
  - [webhooks, {allIndexes: true}, reinvocationPolicy]
  - [webhooks, {allIndexes: true}, rules]
  - [webhooks, {allIndexes: true}, timeoutSeconds]
  type: copy
  sources: [new, existing]
  resourceMatchers:
  - apiVersionKindMatcher: {apiVersion: admissionregistration.k8s.io/v1, kind: MutatingWebhookConfiguration}
  - apiVersionKindMatcher: {apiVersion: admissionregistration.k8s.io/v1, kind: ValidatingWebhookConfiguration}
